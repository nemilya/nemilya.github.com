// Generated by CoffeeScript 1.3.3
(function() {
  var GameSokoban, root,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  GameSokoban = (function() {

    function GameSokoban() {}

    GameSokoban.WALL = '#';

    GameSokoban.SOKOBAN = '@';

    GameSokoban.FREE = ' ';

    GameSokoban.BOX = '$';

    GameSokoban.GOAL = '.';

    GameSokoban.SOKOBAN_ON_GOAL = '+';

    GameSokoban.BOX_ON_GOAL = '*';

    GameSokoban.DIRECTIONS = {
      'up': {
        row: -1
      },
      'down': {
        row: 1
      },
      'left': {
        col: -1
      },
      'right': {
        col: 1
      }
    };

    GameSokoban.prototype.set_level = function(level) {
      var cells, row, rows, _i, _len, _results;
      this.level_cells = [];
      rows = level.split(/\n/);
      _results = [];
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        if (row === '') {
          continue;
        }
        cells = row.split(/(?:)/);
        this.level_cells.push(cells);
        _results.push(this.init_info());
      }
      return _results;
    };

    GameSokoban.prototype.element_at_pos = function(pos) {
      return this.level_cells[pos.row][pos.col];
    };

    GameSokoban.prototype.info = function() {
      return this._info;
    };

    GameSokoban.prototype.init_info = function() {
      var cell, cur_pos, pos_col, pos_row, row, _i, _j, _len, _len1, _ref, _results;
      this._info = {};
      this._info.box_cnt = 0;
      this._info.sokoban_cnt = 0;
      this._info.goals_cnt = 0;
      this._info.box_on_goal_cnt = 0;
      this._level_size = {
        max_row: 0,
        max_col: 0
      };
      this._level_size.max_row = this.level_cells.length - 1;
      this._sokoban_pos = {};
      this._walls = [];
      this._boxes = [];
      this._goals = [];
      pos_row = 0;
      _ref = this.level_cells;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        pos_col = 0;
        if (row.length - 1 > this._level_size.max_col) {
          this._level_size.max_col = row.length - 1;
        }
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          cell = row[_j];
          cur_pos = {
            row: pos_row,
            col: pos_col
          };
          if (cell === GameSokoban.WALL) {
            this._walls.push(cur_pos);
          }
          if (cell === GameSokoban.SOKOBAN || cell === GameSokoban.SOKOBAN_ON_GOAL) {
            this._info.sokoban_cnt++;
            this._sokoban_pos = cur_pos;
          }
          if (cell === GameSokoban.BOX || cell === GameSokoban.BOX_ON_GOAL) {
            this._boxes.push(cur_pos);
            this._info.box_cnt++;
          }
          if (cell === GameSokoban.GOAL || cell === GameSokoban.SOKOBAN_ON_GOAL || cell === GameSokoban.BOX_ON_GOAL) {
            this._goals.push(cur_pos);
            this._info.goals_cnt++;
          }
          if (cell === GameSokoban.BOX_ON_GOAL) {
            this._info.box_on_goal_cnt++;
          }
          pos_col++;
        }
        _results.push(pos_row++);
      }
      return _results;
    };

    GameSokoban.prototype.level_size = function() {
      return this._level_size;
    };

    GameSokoban.prototype.level_valid = function() {
      return this._info.sokoban_cnt === 1 && this._info.box_cnt > 0 && this._info.goals_cnt === this._info.box_cnt;
    };

    GameSokoban.prototype.get_cell_at = function(pos) {
      if (this.is_wall_at_pos(pos)) {
        return GameSokoban.WALL;
      }
      if (this.is_sokoban_at_pos(pos)) {
        if (this.is_goal_at_pos(pos)) {
          return GameSokoban.SOKOBAN_ON_GOAL;
        }
        return GameSokoban.SOKOBAN;
      }
      if (this.is_box_at_pos(pos)) {
        if (this.is_goal_at_pos(pos)) {
          return GameSokoban.BOX_ON_GOAL;
        }
        return GameSokoban.BOX;
      }
      if (this.is_goal_at_pos(pos)) {
        return GameSokoban.GOAL;
      }
      return GameSokoban.FREE;
    };

    GameSokoban.prototype.get_level = function() {
      this.refresh_cells();
      return this.cells2ascii();
    };

    GameSokoban.prototype.sokoban_pos = function() {
      return this._sokoban_pos;
    };

    GameSokoban.prototype.valid_direction = function(direction) {
      var d, d_key, d_keys, _ref;
      d_keys = [];
      _ref = GameSokoban.DIRECTIONS;
      for (d_key in _ref) {
        d = _ref[d_key];
        d_keys.push(d_key);
      }
      return __indexOf.call(d_keys, direction) >= 0;
    };

    GameSokoban.prototype.sokoban_move = function(direction) {
      var element_at_pos, new_pos;
      if (!this.valid_direction(direction)) {
        return;
      }
      new_pos = this._new_pos_by_direction(this._sokoban_pos, direction);
      element_at_pos = this.element_at_pos(new_pos);
      if (element_at_pos === GameSokoban.FREE || element_at_pos === GameSokoban.GOAL) {
        this._sokoban_pos = new_pos;
      }
      if (element_at_pos === GameSokoban.BOX) {
        if (this.is_box_movable(new_pos, direction)) {
          this.move_box(new_pos, direction);
          return this._sokoban_pos = new_pos;
        }
      }
    };

    GameSokoban.prototype.is_box_movable = function(pos, direction) {
      var element_at_pos;
      element_at_pos = this.element_at_pos(this._new_pos_by_direction(pos, direction));
      if (element_at_pos === GameSokoban.FREE || element_at_pos === GameSokoban.GOAL) {
        return true;
      }
      return false;
    };

    GameSokoban.prototype.move_box = function(pos, direction) {
      var box, d, k, vector, _results;
      box = this.get_box_at(pos);
      vector = GameSokoban.DIRECTIONS[direction];
      _results = [];
      for (k in vector) {
        d = vector[k];
        _results.push(box[k] += d);
      }
      return _results;
    };

    GameSokoban.prototype.get_box_at = function(pos) {
      var box_pos, _i, _len, _ref;
      _ref = this._boxes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box_pos = _ref[_i];
        if (this._is_pos_eq(box_pos, pos)) {
          return box_pos;
        }
      }
    };

    GameSokoban.prototype.boxes = function() {
      return this._boxes;
    };

    GameSokoban.prototype.refresh_cells = function() {
      var cell, col_pos, cur_pos, new_cells, row_pos, _i, _j, _ref, _ref1;
      new_cells = [];
      for (row_pos = _i = 0, _ref = this._level_size.max_row; 0 <= _ref ? _i <= _ref : _i >= _ref; row_pos = 0 <= _ref ? ++_i : --_i) {
        new_cells[row_pos] = [];
        for (col_pos = _j = 0, _ref1 = this._level_size.max_col; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; col_pos = 0 <= _ref1 ? ++_j : --_j) {
          cur_pos = {
            col: col_pos,
            row: row_pos
          };
          cell = this.get_cell_at(cur_pos);
          new_cells[row_pos][col_pos] = cell;
        }
      }
      return this.level_cells = new_cells;
    };

    GameSokoban.prototype._clone_pos = function(pos) {
      return {
        col: pos.col,
        row: pos.row
      };
    };

    GameSokoban.prototype._new_pos_by_direction = function(pos, direction) {
      var delta, k, v, _pos;
      _pos = this._clone_pos(pos);
      delta = GameSokoban.DIRECTIONS[direction];
      for (k in delta) {
        v = delta[k];
        _pos[k] += v;
      }
      return _pos;
    };

    GameSokoban.prototype.cells2ascii = function() {
      var row, rows, _i, _len, _ref;
      rows = [];
      _ref = this.level_cells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        rows.push(row.join(''));
      }
      return rows.join("\n");
    };

    GameSokoban.prototype.is_wall_at_pos = function(pos) {
      return this._is_pos_in_array(this._walls, pos);
    };

    GameSokoban.prototype.is_sokoban_at_pos = function(pos) {
      return this._is_pos_eq(pos, this._sokoban_pos);
    };

    GameSokoban.prototype.is_box_at_pos = function(pos) {
      return this._is_pos_in_array(this._boxes, pos);
    };

    GameSokoban.prototype.is_goal_at_pos = function(pos) {
      return this._is_pos_in_array(this._goals, pos);
    };

    GameSokoban.prototype._is_pos_eq = function(pos1, pos2) {
      return pos1.col === pos2.col && pos1.row === pos2.row;
    };

    GameSokoban.prototype._is_pos_in_array = function(arr, pos) {
      var _i, _len, _pos;
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        _pos = arr[_i];
        if (this._is_pos_eq(pos, _pos)) {
          return true;
        }
      }
      return false;
    };

    return GameSokoban;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.GameSokoban = GameSokoban;

}).call(this);
